const log = document.getElementById("log");

function escrever(msg) {
  log.innerText += msg + "\n";
}

function limparLog() {
  log.innerText = "";
}

// Demonstra√ß√£o de let
function testarLet() {
  limparLog();
  escrever("üî∑ Demonstra√ß√£o com let:");

  let idade = 25;
  escrever(`idade inicial: ${idade}`);
  
  idade = 30;
  escrever(`idade reatribu√≠da: ${idade}`);

  {
    let idade = 50; // escopo de bloco
    escrever(`idade dentro do bloco: ${idade}`);
  }

  escrever(`idade fora do bloco: ${idade}`);

  try {
    escrever(`Tentando usar let antes da declara√ß√£o...`);
    escrever(valorLetNaoDeclarado); // ReferenceError
    let valorLetNaoDeclarado = 10;
  } catch (e) {
    escrever(`‚ùå Erro esperado: ${e.message}`);
  }
}

// Demonstra√ß√£o de const
function testarConst() {
  limparLog();
  escrever("üü¢ Demonstra√ß√£o com const:");

  const nome = "Jon Snow";
  escrever(`nome constante: ${nome}`);

  try {
    nome = "Arya Stark"; // erro: reatribui√ß√£o n√£o permitida
  } catch (e) {
    escrever(`‚ùå Erro ao reatribuir const: ${e.message}`);
  }

  // Muta√ß√£o de objeto mesmo com const
  const personagem = { nome: "Daenerys", titulo: "Rainha" };
  personagem.titulo = "M√£e dos Drag√µes"; // permitido
  escrever(`üõ†Ô∏è objeto mutado: ${JSON.stringify(personagem)}`);

  const lista = [1, 2, 3];
  lista.push(4);
  escrever(`üõ†Ô∏è array mutado: [${lista}]`);
}

// Comparando let e const
function compararLetConst() {
  limparLog();
  escrever("‚öñÔ∏è Comparando let e const:");

  let a = 10;
  const b = 20;

  escrever(`let a = ${a}`);
  escrever(`const b = ${b}`);

  a = 15;
  escrever(`‚úÖ let pode ser reatribu√≠do: a = ${a}`);

  try {
    b = 25; // erro
  } catch (e) {
    escrever(`‚ùå const n√£o pode ser reatribu√≠do: ${e.message}`);
  }

  {
    let escopoLet = "let dentro do bloco";
    const escopoConst = "const dentro do bloco";
    escrever(`üß± dentro do bloco: ${escopoLet}, ${escopoConst}`);
  }

  try {
    escrever(`Fora do bloco: ${escopoLet}`);
  } catch (e) {
    escrever(`‚ùå escopoLet n√£o existe fora do bloco: ${e.message}`);
  }
}
//| Comportamento                       | Exemplo                                                                   |
//| ----------------------------------- | ------------------------------------------------------------------------- |
//| **Reatribui√ß√£o com `let`**          | `let x = 1; x = 2; ‚úÖ funciona`                                            |
//| **Reatribui√ß√£o com `const`**        | `const x = 1; x = 2; ‚ùå erro`                                              |
//| **Muta√ß√£o com `const` (objeto)**    | `const obj = {}; obj.nome = "Jon"; ‚úÖ permitido`                           |
//| **Escopo de bloco com `let/const`** | Dentro de `if`, `for`, etc. ‚Äì isolados do resto                           |
//| **Hoisting com `var`**              | Pode ser acessado antes da declara√ß√£o, mas vale `undefined`               |
//| **Hoisting com `let/const`**        | Lan√ßam erro se acessados antes da declara√ß√£o (TDZ ‚Äì *temporal dead zone*) |
